from datetime import datetime
import os
import tempfile
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from io import BytesIO
import matplotlib.pyplot as plt
import pandas as pd

class ReportGenerator:
    def __init__(self, data_processor, visualizer):
        self.data_processor = data_processor
        self.visualizer = visualizer
    def _add_watermark(self, c, width, height, logo_path=None):
        c.saveState()
        c.setFont('Helvetica-Bold', 16)
        c.setFillColorRGB(0.32, 0.6, 0.97, alpha=0.12)
        c.drawString(width - 260, 40, 'Generated by EasyAIAanalytics')
        if logo_path:
            c.drawImage(logo_path, width - 120, 10, width=80, height=80, mask='auto')
        c.restoreState()
    def _plot_chart_to_png(self, chart_data):
        fig = None
        try:
            if chart_data['type'] == 'bar':
                fig, ax = plt.subplots(figsize=(5, 3))
                ax.bar(chart_data['x'], chart_data['y'], color='#275EFE')
                ax.set_title(chart_data.get('title', 'Bar Chart'))
            elif chart_data['type'] == 'line':
                fig, ax = plt.subplots(figsize=(5, 3))
                ax.plot(chart_data['x'], chart_data['y'], color='#275EFE')
                ax.set_title(chart_data.get('title', 'Line Chart'))
            elif chart_data['type'] == 'scatter':
                fig, ax = plt.subplots(figsize=(5, 3))
                ax.scatter(chart_data['x'], chart_data['y'], color='#275EFE')
                ax.set_title(chart_data.get('title', 'Scatter Plot'))
            elif chart_data['type'] == 'pie':
                fig, ax = plt.subplots(figsize=(4, 4))
                ax.pie(chart_data['values'], labels=chart_data['labels'], autopct='%1.1f%%', colors=['#275EFE', '#3b82f6', '#60a5fa', '#93c5fd', '#dbeafe'])
                ax.set_title(chart_data.get('title', 'Pie Chart'))
            elif chart_data['type'] == 'heatmap':
                fig, ax = plt.subplots(figsize=(5, 3))
                cax = ax.imshow(chart_data['z'], cmap='Blues', aspect='auto')
                fig.colorbar(cax)
                ax.set_title(chart_data.get('title', 'Heatmap'))
                ax.set_xticks(range(len(chart_data['x'])))
                ax.set_xticklabels(chart_data['x'], rotation=45, ha='right', fontsize=8)
                ax.set_yticks(range(len(chart_data['y'])))
                ax.set_yticklabels(chart_data['y'], fontsize=8)
            else:
                return None
            buf = BytesIO()
            plt.tight_layout()
            fig.savefig(buf, format='png', dpi=150)
            plt.close(fig)
            buf.seek(0)
            return buf
        except Exception as e:
            if fig:
                plt.close(fig)
            return None
    def generate_pdf_report(self, title: str, company: str, charts: list) -> bytes:
        try:
            import uuid
            temp_filename = f"report_{uuid.uuid4().hex}.pdf"
            temp_path = os.path.join(tempfile.gettempdir(), temp_filename)
            doc = SimpleDocTemplate(temp_path, pagesize=letter)
            story = []
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=26,
                spaceAfter=24,
                alignment=1,
                fontName='Helvetica-Bold',
                textColor=colors.HexColor('#275EFE')
            )
            section_style = ParagraphStyle(
                'SectionHeader',
                parent=styles['Heading2'],
                fontSize=18,
                spaceAfter=12,
                textColor=colors.HexColor('#275EFE'),
                fontName='Helvetica-Bold'
            )
            normal_style = ParagraphStyle(
                'Normal',
                parent=styles['Normal'],
                fontSize=12,
                spaceAfter=8,
                fontName='Helvetica'
            )
            logo_path = None
            story.append(Paragraph(title, title_style))
            story.append(Spacer(1, 10))
            story.append(Paragraph(f"<b>Company:</b> {company}", normal_style))
            story.append(Paragraph(f"<b>Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", normal_style))
            story.append(Spacer(1, 18))
            basic_info = self.data_processor.get_basic_info()
            summary_data = [
                ['Metric', 'Value'],
                ['Total Rows', str(basic_info['rows'])],
                ['Total Columns', str(basic_info['columns'])],
                ['File Size', basic_info['file_size']],
                ['Missing Values', str(basic_info['missing_values'])]
            ]
            summary_table = Table(summary_data)
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#275EFE')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 14),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#e5eafe')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#275EFE'))
            ]))
            story.append(Paragraph("Data Summary", section_style))
            story.append(summary_table)
            story.append(Spacer(1, 18))
            column_info = self.data_processor.get_column_info()
            col_table_data = [['Column', 'Type', 'Missing', 'Unique']]
            for col in column_info:
                col_table_data.append([
                    col['name'],
                    col['dtype'],
                    str(col['missing_count']),
                    str(col['unique_count'])
                ])
            col_table = Table(col_table_data)
            col_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#275EFE')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f3f4f6')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#275EFE'))
            ]))
            story.append(Paragraph("Column Information", section_style))
            story.append(col_table)
            story.append(Spacer(1, 18))
            if charts:
                story.append(Paragraph("Charts & Diagrams", section_style))
                for chart_obj in charts:
                    chart_type = chart_obj.get('type')
                    chart_title = chart_obj.get('title', chart_type)
                    chart_data = None
                    try:
                        if chart_type == 'bar':
                            chart_data = self.visualizer.plot_distribution(chart_obj.get('column', chart_title))
                        elif chart_type == 'line':
                            chart_data = self.visualizer.plot_line(chart_obj.get('x'), chart_obj.get('y'))
                        elif chart_type == 'scatter':
                            chart_data = self.visualizer.plot_scatter(chart_obj.get('x'), chart_obj.get('y'))
                        elif chart_type == 'pie':
                            chart_data = self.visualizer.plot_categorical_distribution(chart_obj.get('column', chart_title))
                        elif chart_type == 'heatmap':
                            chart_data = self.visualizer.plot_correlation_matrix()
                    except Exception:
                        continue
                    if chart_data and 'data' in chart_data and chart_data['data']:
                        chart = chart_data['data'][0]
                        buf = self._plot_chart_to_png(chart)
                        if buf:
                            story.append(Spacer(1, 10))
                            story.append(Paragraph(chart_title, normal_style))
                            story.append(Image(buf, width=350, height=210))
                            story.append(Spacer(1, 10))
            story.append(Spacer(1, 18))
            def add_watermark(canvas_obj, doc_obj):
                self._add_watermark(canvas_obj, letter[0], letter[1], logo_path)
            doc.build(story, onFirstPage=add_watermark, onLaterPages=add_watermark)
            with open(temp_path, 'rb') as f:
                pdf_bytes = f.read()
            try:
                os.unlink(temp_path)
            except Exception as cleanup_error:
                print(f"Warning: Could not delete temp file {temp_path}: {cleanup_error}")
            return pdf_bytes
        except Exception as e:
            print(f"PDF generation error: {str(e)}")
            return self._generate_simple_pdf(title, company)
    def _generate_simple_pdf(self, title: str, company: str) -> bytes:
        try:
            import uuid
            temp_filename = f"simple_report_{uuid.uuid4().hex}.pdf"
            temp_path = os.path.join(tempfile.gettempdir(), temp_filename)
            doc = SimpleDocTemplate(temp_path, pagesize=letter)
            story = []
            styles = getSampleStyleSheet()
            story.append(Paragraph(title, styles['Heading1']))
            story.append(Paragraph(f"Company: {company}", styles['Normal']))
            story.append(Paragraph(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal']))
            story.append(Spacer(1, 20))
            story.append(Paragraph("Data Analysis Report", styles['Heading2']))
            story.append(Paragraph("This report contains the analysis of your uploaded dataset.", styles['Normal']))
            doc.build(story)
            with open(temp_path, 'rb') as f:
                pdf_bytes = f.read()
            try:
                os.unlink(temp_path)
            except Exception as cleanup_error:
                print(f"Warning: Could not delete temp file {temp_path}: {cleanup_error}")
            return pdf_bytes
        except Exception as e:
            print(f"Simple PDF generation also failed: {str(e)}")
            return b'' 